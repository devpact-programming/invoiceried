plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.devpact'
version '1.0-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
    lombokVersion = '1.18.24'
    controlsfxVersion = '11.1.1'
    jacksonVersion = '2.13.3'
    spockVersion = '2.1-groovy-3.0'
    groovyVersion = '3.0.11'
    guavaVersion = '31.1-jre'
    javafxWeaverVersion = '1.3.0'
    flyingSaucerPdfVersion = '9.1.22'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.devpact.invoiceried'
    mainClass = 'com.devpact.invoiceried.InvoiceriedApplication'
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation(
            project(':shared-kernel'),
            'org.springframework.boot:spring-boot-starter',
            "org.controlsfx:controlsfx:${controlsfxVersion}",
            "net.rgielen:javafx-weaver-spring-boot-starter:${javafxWeaverVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    )

    compileOnly(
            "com.google.guava:guava:31.1-jre",
            "org.projectlombok:lombok:${lombokVersion}"
    )

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation("org.springframework.boot:spring-boot-starter-test",
        "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
        "org.spockframework:spock-core:${spockVersion}",
        "org.codehaus.groovy:groovy-all:${groovyVersion}",
        "com.google.guava:guava:${guavaVersion}"
    )

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompileOnly(
            "org.projectlombok:lombok:${lombokVersion}"
    )
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip.fileValue(project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip"))
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}